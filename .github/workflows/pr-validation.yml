# Pull Request Quick Validation
# Fast validation for PR quality gates

name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  pull_request_target:
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '18'

jobs:
  # Quick syntax and basic checks
  quick-validation:
    name: Quick Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --only=production --ignore-scripts
          npm install --no-save @playwright/test

      - name: JavaScript syntax check
        run: |
          echo "🔧 Checking JavaScript syntax..."

          # Find all JS files excluding node_modules
          find . -name "*.js" -not -path "./node_modules/*" -not -path "./.git/*" | while read -r file; do
            echo "Checking: $file"
            node -c "$file" || {
              echo "❌ Syntax error in: $file"
              exit 1
            }
          done
          echo "✅ All JavaScript files have valid syntax"

      - name: Critical file check
        run: |
          echo "📁 Checking critical files..."

          CRITICAL_FILES=("game.js" "index.html" "package.json")
          MISSING_FILES=()

          for file in "${CRITICAL_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              MISSING_FILES+=("$file")
            fi
          done

          if [ ${#MISSING_FILES[@]} -ne 0 ]; then
            echo "❌ Missing critical files: ${MISSING_FILES[*]}"
            exit 1
          fi

          echo "✅ All critical files present"

      - name: Package.json validation
        run: |
          echo "📦 Validating package.json..."
          node -e "
            try {
              const pkg = require('./package.json');

              // Check required fields
              const required = ['name', 'version', 'main'];
              const missing = required.filter(field => !pkg[field]);

              if (missing.length > 0) {
                console.log('❌ Missing required package.json fields:', missing);
                process.exit(1);
              }

              // Check for malicious scripts
              if (pkg.scripts) {
                const suspicious = Object.entries(pkg.scripts)
                  .filter(([name, script]) => {
                    return script.includes('rm -rf') ||
                           script.includes('curl') ||
                           script.includes('wget') ||
                           script.includes('eval');
                  });

                if (suspicious.length > 0) {
                  console.log('⚠️ Suspicious scripts found:', suspicious.map(([name]) => name));
                  // Don't fail, just warn
                }
              }

              console.log('✅ package.json is valid');
            } catch (e) {
              console.log('❌ Invalid package.json:', e.message);
              process.exit(1);
            }
          "

      - name: Basic validation check
        run: |
          echo "🔍 Running basic validation..."

          if [ -f "validation/cli.js" ]; then
            timeout 300s node validation/cli.js check --quick --syntax-only || {
              echo "❌ Quick validation failed"
              exit 1
            }
          else
            echo "⚠️ Validation CLI not available, using fallback checks"

            # Basic game.js structure check
            if [ -f "game.js" ]; then
              if ! grep -q "class Game" game.js && ! grep -q "function Game" game.js; then
                echo "⚠️ No Game class/function found in game.js"
              fi
            fi
          fi

          echo "✅ Basic validation passed"

      - name: Set PR status - Quick Check
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}';
            const state = status === 'success' ? 'success' : 'failure';
            const description = status === 'success' ?
              'Quick validation passed' :
              'Quick validation failed';

            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: '${{ github.event.pull_request.head.sha }}',
              state: state,
              target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: description,
              context: 'validation/quick-check'
            });

  # Critical path testing
  critical-path-test:
    name: Critical Path Testing
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quick-validation

    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npx playwright install chromium --with-deps

      - name: Start test server
        run: |
          python3 -m http.server 8080 &
          echo $! > server.pid
          sleep 5

      - name: Wait for server
        run: |
          for i in {1..15}; do
            if curl -s http://localhost:8080 > /dev/null; then
              echo "Server ready"
              break
            fi
            echo "Waiting... ($i/15)"
            sleep 2
          done

      - name: Run critical E2E tests
        run: |
          echo "🧪 Running critical path tests..."

          if [ -d "tests" ] && [ -f "playwright.config.js" ]; then
            # Run tests tagged as critical
            npx playwright test \
              --grep "@critical|@smoke" \
              --project=chromium \
              --reporter=github,line \
              --max-failures=3 || {
                echo "❌ Critical path tests failed"
                exit 1
              }
          else
            echo "🔧 No E2E tests found, creating basic smoke test..."

            # Create basic smoke test
            mkdir -p tests/e2e
            cat > tests/e2e/smoke.spec.js << 'EOF'
            const { test, expect } = require('@playwright/test');

            test('Game loads without errors @critical @smoke', async ({ page }) => {
              // Listen for console errors
              const errors = [];
              page.on('console', msg => {
                if (msg.type() === 'error') {
                  errors.push(msg.text());
                }
              });

              page.on('pageerror', err => {
                errors.push(err.message);
              });

              // Navigate to game
              await page.goto('http://localhost:8080');

              // Wait for basic load
              await page.waitForTimeout(3000);

              // Check title
              await expect(page).toHaveTitle(/Idle Cultivation|Game/i);

              // Check for critical errors
              expect(errors.filter(e =>
                e.includes('ReferenceError') ||
                e.includes('TypeError') ||
                e.includes('SyntaxError')
              )).toHaveLength(0);

              console.log('✅ Basic smoke test passed');
            });

            test('Game starts without critical failures @critical', async ({ page }) => {
              await page.goto('http://localhost:8080');

              // Look for game container/canvas
              const gameElement = await page.locator('canvas, #game, .game-container').first();
              await expect(gameElement).toBeVisible();

              console.log('✅ Game UI elements loaded');
            });
            EOF

            # Run the smoke test
            npx playwright test tests/e2e/smoke.spec.js \
              --project=chromium \
              --reporter=line || {
                echo "❌ Smoke test failed"
                exit 1
              }
          fi

          echo "✅ Critical path tests completed"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: critical-path-results-${{ github.run_number }}
          path: |
            test-results/
            playwright-report/

      - name: Stop test server
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) 2>/dev/null || true
          fi

      - name: Set PR status - Critical Path
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}';
            const state = status === 'success' ? 'success' : 'failure';
            const description = status === 'success' ?
              'Critical path tests passed' :
              'Critical path tests failed';

            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: '${{ github.event.pull_request.head.sha }}',
              state: state,
              target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: description,
              context: 'validation/critical-path'
            });

  # Security and compliance check
  security-check:
    name: Security & Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Check for sensitive data
        run: |
          echo "🔐 Checking for sensitive data..."

          # Check for common secrets patterns
          SECRETS_FOUND=0

          # API keys
          if grep -r -E "(api[_-]?key|apikey)" --include="*.js" --include="*.json" --include="*.md" . | grep -v node_modules | grep -i -E "(=|:).*['\"][a-zA-Z0-9]{20,}"; then
            echo "⚠️ Potential API keys found"
            SECRETS_FOUND=1
          fi

          # Passwords
          if grep -r -E "(password|passwd|pwd)" --include="*.js" --include="*.json" . | grep -v node_modules | grep -i -E "(=|:).*['\"][^'\"]{8,}"; then
            echo "⚠️ Potential passwords found"
            SECRETS_FOUND=1
          fi

          # Tokens
          if grep -r -E "(token|auth)" --include="*.js" --include="*.json" . | grep -v node_modules | grep -i -E "(=|:).*['\"][a-zA-Z0-9]{16,}"; then
            echo "⚠️ Potential tokens found"
            SECRETS_FOUND=1
          fi

          if [ $SECRETS_FOUND -eq 1 ]; then
            echo "❌ Potential secrets detected in code"
            echo "Please review and remove any hardcoded secrets"
            # Don't fail the PR, just warn
          else
            echo "✅ No obvious secrets detected"
          fi

      - name: Check file sizes
        run: |
          echo "📏 Checking file sizes..."

          # Check for large files (>10MB)
          find . -type f -size +10M -not -path "./node_modules/*" -not -path "./.git/*" | while read -r file; do
            echo "⚠️ Large file detected: $file"
          done

          # Check for too many files in commit
          FILE_COUNT=$(git diff --name-only origin/main...HEAD 2>/dev/null | wc -l || echo 0)
          if [ $FILE_COUNT -gt 100 ]; then
            echo "⚠️ Large number of files changed: $FILE_COUNT"
            echo "Consider breaking into smaller PRs"
          fi

          echo "✅ File size check completed"

      - name: Set PR status - Security
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}';
            const state = status === 'success' ? 'success' : 'failure';
            const description = status === 'success' ?
              'Security checks passed' :
              'Security checks failed';

            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: '${{ github.event.pull_request.head.sha }}',
              state: state,
              target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: description,
              context: 'validation/security'
            });

  # Summarize PR validation results
  pr-summary:
    name: PR Validation Summary
    runs-on: ubuntu-latest
    needs: [quick-validation, critical-path-test, security-check]
    if: always()

    steps:
      - name: Create PR summary comment
        uses: actions/github-script@v7
        with:
          script: |
            const needs = ${{ toJson(needs) }};

            let summary = '## 🔍 PR Validation Summary\\n\\n';

            const checks = [
              { name: 'Quick Validation', job: 'quick-validation', emoji: '⚡' },
              { name: 'Critical Path Tests', job: 'critical-path-test', emoji: '🧪' },
              { name: 'Security & Compliance', job: 'security-check', emoji: '🔐' }
            ];

            let allPassed = true;

            checks.forEach(check => {
              const result = needs[check.job];
              const status = result ? result.result : 'skipped';
              const emoji = status === 'success' ? '✅' :
                           status === 'failure' ? '❌' : '⏭️';

              summary += `${check.emoji} **${check.name}:** ${emoji} ${status.toUpperCase()}\\n`;

              if (status === 'failure') allPassed = false;
            });

            summary += '\\n';

            if (allPassed) {
              summary += '🎉 **All validation checks passed!** This PR is ready for review.\\n\\n';
              summary += '### Next Steps\\n';
              summary += '- [ ] Code review by team member\\n';
              summary += '- [ ] Full validation will run on merge\\n';
            } else {
              summary += '⚠️ **Some validation checks failed.** Please review and fix issues before proceeding.\\n\\n';
              summary += '### Action Required\\n';
              summary += '- [ ] Review failed checks above\\n';
              summary += '- [ ] Fix identified issues\\n';
              summary += '- [ ] Push updates to trigger re-validation\\n';
            }

            summary += '\\n---\\n_Generated by PR Validation CI/CD_';

            // Find existing summary comment and update it
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const existingComment = comments.data.find(
              comment => comment.body.includes('🔍 PR Validation Summary')
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                comment_id: existingComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            }