
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  passwordHash: 'passwordHash',
  displayName: 'displayName',
  avatar: 'avatar',
  title: 'title',
  biography: 'biography',
  autoSave: 'autoSave',
  notifications: 'notifications',
  soundEnabled: 'soundEnabled',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastActiveAt: 'lastActiveAt'
};

exports.Prisma.CharacterScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  realm: 'realm',
  level: 'level',
  experience: 'experience',
  experienceToNext: 'experienceToNext',
  strength: 'strength',
  agility: 'agility',
  intelligence: 'intelligence',
  constitution: 'constitution',
  perception: 'perception',
  luck: 'luck',
  spiritualElement: 'spiritualElement',
  spiritualPurity: 'spiritualPurity',
  spiritualGrade: 'spiritualGrade',
  bloodlineId: 'bloodlineId',
  bloodlineAwakening: 'bloodlineAwakening',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CultivationProgressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  currentTechniqueId: 'currentTechniqueId',
  qiAmount: 'qiAmount',
  qiCapacity: 'qiCapacity',
  cultivationSpeed: 'cultivationSpeed',
  bottleneckProgress: 'bottleneckProgress',
  breakthroughAttempts: 'breakthroughAttempts',
  stabilityPercentage: 'stabilityPercentage',
  isSessionActive: 'isSessionActive',
  sessionStartTime: 'sessionStartTime',
  sessionDuration: 'sessionDuration',
  sessionQiGained: 'sessionQiGained',
  sessionExpGained: 'sessionExpGained',
  lastCalculatedAt: 'lastCalculatedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CultivationTechniqueScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  type: 'type',
  element: 'element',
  minRealm: 'minRealm',
  minLevel: 'minLevel',
  baseSpeed: 'baseSpeed',
  qiEfficiency: 'qiEfficiency',
  stabilityBonus: 'stabilityBonus',
  rarity: 'rarity',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CharacterTechniqueScalarFieldEnum = {
  id: 'id',
  characterId: 'characterId',
  techniqueId: 'techniqueId',
  proficiency: 'proficiency',
  level: 'level',
  experience: 'experience',
  masteryBonus: 'masteryBonus',
  learnedAt: 'learnedAt',
  lastUsedAt: 'lastUsedAt'
};

exports.Prisma.TalentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  type: 'type',
  effects: 'effects',
  requirements: 'requirements',
  rarity: 'rarity',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CharacterTalentScalarFieldEnum = {
  id: 'id',
  characterId: 'characterId',
  talentId: 'talentId',
  isUnlocked: 'isUnlocked',
  unlockedAt: 'unlockedAt'
};

exports.Prisma.BloodlineScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  rarity: 'rarity',
  abilities: 'abilities',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ResourcesScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  spiritStones: 'spiritStones',
  gold: 'gold',
  materials: 'materials',
  pills: 'pills',
  herbs: 'herbs',
  lastUpdated: 'lastUpdated'
};

exports.Prisma.ItemScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  type: 'type',
  rarity: 'rarity',
  value: 'value',
  stackable: 'stackable',
  tradeable: 'tradeable',
  consumable: 'consumable',
  effects: 'effects',
  requirements: 'requirements',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InventoryItemScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  itemId: 'itemId',
  quantity: 'quantity',
  metadata: 'metadata',
  acquiredAt: 'acquiredAt'
};

exports.Prisma.CombatStatsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  level: 'level',
  health: 'health',
  maxHealth: 'maxHealth',
  attack: 'attack',
  defense: 'defense',
  speed: 'speed',
  criticalChance: 'criticalChance',
  criticalDamage: 'criticalDamage',
  combatExperience: 'combatExperience',
  wins: 'wins',
  losses: 'losses',
  draws: 'draws',
  lastCombatAt: 'lastCombatAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CombatLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  opponentName: 'opponentName',
  result: 'result',
  duration: 'duration',
  damageDealt: 'damageDealt',
  damageReceived: 'damageReceived',
  experienceGained: 'experienceGained',
  lootGained: 'lootGained',
  combatDetails: 'combatDetails',
  foughtAt: 'foughtAt'
};

exports.Prisma.SectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  level: 'level',
  experience: 'experience',
  leaderId: 'leaderId',
  spiritStones: 'spiritStones',
  reputation: 'reputation',
  influence: 'influence',
  territory: 'territory',
  buildings: 'buildings',
  alliances: 'alliances',
  enemies: 'enemies',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SectMemberScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sectId: 'sectId',
  role: 'role',
  contribution: 'contribution',
  permissions: 'permissions',
  joinedAt: 'joinedAt',
  lastActiveAt: 'lastActiveAt'
};

exports.Prisma.AchievementScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  category: 'category',
  maxProgress: 'maxProgress',
  rewards: 'rewards',
  isHidden: 'isHidden',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserAchievementScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  achievementId: 'achievementId',
  progress: 'progress',
  isCompleted: 'isCompleted',
  completedAt: 'completedAt'
};

exports.Prisma.GameStatisticsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  totalPlayTime: 'totalPlayTime',
  cultivationTime: 'cultivationTime',
  combatWins: 'combatWins',
  combatLosses: 'combatLosses',
  itemsCrafted: 'itemsCrafted',
  achievementsUnlocked: 'achievementsUnlocked',
  realmBreakthroughs: 'realmBreakthroughs',
  sectContribution: 'sectContribution',
  resourcesEarned: 'resourcesEarned',
  lastUpdated: 'lastUpdated'
};

exports.Prisma.GameEventScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  data: 'data',
  processed: 'processed',
  createdAt: 'createdAt',
  processedAt: 'processedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.CultivationRealm = exports.$Enums.CultivationRealm = {
  MORTAL: 'MORTAL',
  QI_REFINING: 'QI_REFINING',
  FOUNDATION_ESTABLISHMENT: 'FOUNDATION_ESTABLISHMENT',
  CORE_FORMATION: 'CORE_FORMATION',
  NASCENT_SOUL: 'NASCENT_SOUL',
  SOUL_TRANSFORMATION: 'SOUL_TRANSFORMATION',
  VOID_REFINEMENT: 'VOID_REFINEMENT',
  BODY_INTEGRATION: 'BODY_INTEGRATION',
  MAHAYANA: 'MAHAYANA',
  TRANSCENDENCE: 'TRANSCENDENCE'
};

exports.ElementType = exports.$Enums.ElementType = {
  FIRE: 'FIRE',
  WATER: 'WATER',
  EARTH: 'EARTH',
  WOOD: 'WOOD',
  METAL: 'METAL',
  LIGHTNING: 'LIGHTNING',
  ICE: 'ICE',
  DARKNESS: 'DARKNESS',
  LIGHT: 'LIGHT'
};

exports.SpiritualGrade = exports.$Enums.SpiritualGrade = {
  TRASH: 'TRASH',
  COMMON: 'COMMON',
  UNCOMMON: 'UNCOMMON',
  RARE: 'RARE',
  LEGENDARY: 'LEGENDARY',
  MYTHICAL: 'MYTHICAL'
};

exports.TechniqueType = exports.$Enums.TechniqueType = {
  BASIC: 'BASIC',
  ADVANCED: 'ADVANCED',
  SUPREME: 'SUPREME',
  DIVINE: 'DIVINE'
};

exports.TalentType = exports.$Enums.TalentType = {
  PASSIVE: 'PASSIVE',
  ACTIVE: 'ACTIVE',
  CONDITIONAL: 'CONDITIONAL'
};

exports.ItemType = exports.$Enums.ItemType = {
  PILL: 'PILL',
  HERB: 'HERB',
  WEAPON: 'WEAPON',
  ARMOR: 'ARMOR',
  ARTIFACT: 'ARTIFACT',
  MATERIAL: 'MATERIAL',
  SCROLL: 'SCROLL',
  TREASURE: 'TREASURE'
};

exports.ItemRarity = exports.$Enums.ItemRarity = {
  COMMON: 'COMMON',
  UNCOMMON: 'UNCOMMON',
  RARE: 'RARE',
  EPIC: 'EPIC',
  LEGENDARY: 'LEGENDARY',
  MYTHICAL: 'MYTHICAL',
  DIVINE: 'DIVINE'
};

exports.SectRole = exports.$Enums.SectRole = {
  LEADER: 'LEADER',
  ELDER: 'ELDER',
  CORE_DISCIPLE: 'CORE_DISCIPLE',
  INNER_DISCIPLE: 'INNER_DISCIPLE',
  OUTER_DISCIPLE: 'OUTER_DISCIPLE'
};

exports.AchievementCategory = exports.$Enums.AchievementCategory = {
  CULTIVATION: 'CULTIVATION',
  COMBAT: 'COMBAT',
  EXPLORATION: 'EXPLORATION',
  SOCIAL: 'SOCIAL',
  COLLECTION: 'COLLECTION',
  SPECIAL: 'SPECIAL'
};

exports.CombatResult = exports.$Enums.CombatResult = {
  WIN: 'WIN',
  LOSS: 'LOSS',
  DRAW: 'DRAW'
};

exports.GameEventType = exports.$Enums.GameEventType = {
  CULTIVATION_BREAKTHROUGH: 'CULTIVATION_BREAKTHROUGH',
  ITEM_ACQUIRED: 'ITEM_ACQUIRED',
  COMBAT_COMPLETED: 'COMBAT_COMPLETED',
  ACHIEVEMENT_UNLOCKED: 'ACHIEVEMENT_UNLOCKED',
  SECT_JOINED: 'SECT_JOINED',
  SECT_LEFT: 'SECT_LEFT',
  TALENT_UNLOCKED: 'TALENT_UNLOCKED',
  BLOODLINE_AWAKENED: 'BLOODLINE_AWAKENED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Character: 'Character',
  CultivationProgress: 'CultivationProgress',
  CultivationTechnique: 'CultivationTechnique',
  CharacterTechnique: 'CharacterTechnique',
  Talent: 'Talent',
  CharacterTalent: 'CharacterTalent',
  Bloodline: 'Bloodline',
  Resources: 'Resources',
  Item: 'Item',
  InventoryItem: 'InventoryItem',
  CombatStats: 'CombatStats',
  CombatLog: 'CombatLog',
  Sect: 'Sect',
  SectMember: 'SectMember',
  Achievement: 'Achievement',
  UserAchievement: 'UserAchievement',
  GameStatistics: 'GameStatistics',
  GameEvent: 'GameEvent'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Users\\Brendan\\Documents\\GitHub\\idle-cultivation-game\\backend\\src\\generated\\prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\Users\\Brendan\\Documents\\GitHub\\idle-cultivation-game\\backend\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": "../../../.env",
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.2",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// Prisma schema for Idle Cultivation Game\n// PostgreSQL 16 database with optimized schema for cultivation game mechanics\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../src/generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// =============================================================================\n// CORE USER AND AUTHENTICATION MODELS\n// =============================================================================\n\nmodel User {\n  id           String @id @default(cuid())\n  username     String @unique @db.VarChar(50)\n  email        String @unique @db.VarChar(255)\n  passwordHash String @db.VarChar(255)\n\n  // Profile information\n  displayName String  @db.VarChar(100)\n  avatar      String? @db.VarChar(500)\n  title       String? @db.VarChar(100)\n  biography   String? @db.Text\n\n  // Preferences\n  autoSave      Boolean @default(true)\n  notifications Boolean @default(true)\n  soundEnabled  Boolean @default(true)\n\n  // Timestamps\n  createdAt    DateTime @default(now())\n  updatedAt    DateTime @updatedAt\n  lastActiveAt DateTime @default(now())\n\n  // Game data relationships\n  character      Character?\n  resources      Resources?\n  inventory      InventoryItem[]\n  cultivation    CultivationProgress?\n  combat         CombatStats?\n  sectMembership SectMember?\n  achievements   UserAchievement[]\n  statistics     GameStatistics?\n  gameEvents     GameEvent[]\n  combatLogs     CombatLog[]\n\n  @@index([username])\n  @@index([email])\n  @@index([lastActiveAt])\n  @@map(\"users\")\n}\n\n// =============================================================================\n// CHARACTER AND CULTIVATION MODELS\n// =============================================================================\n\nmodel Character {\n  id     String @id @default(cuid())\n  userId String @unique\n  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  name             String           @db.VarChar(100)\n  realm            CultivationRealm @default(MORTAL)\n  level            Int              @default(1)\n  experience       BigInt           @default(0)\n  experienceToNext BigInt           @default(100)\n\n  // Core attributes\n  strength     Int @default(10)\n  agility      Int @default(10)\n  intelligence Int @default(10)\n  constitution Int @default(10)\n  perception   Int @default(10)\n  luck         Int @default(10)\n\n  // Spiritual root\n  spiritualElement ElementType    @default(FIRE)\n  spiritualPurity  Int            @default(50) // 1-100\n  spiritualGrade   SpiritualGrade @default(COMMON)\n\n  // Bloodline (optional)\n  bloodlineId        String?\n  bloodline          Bloodline? @relation(fields: [bloodlineId], references: [id])\n  bloodlineAwakening Int        @default(0) // 0-100\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  // Relationships\n  techniques CharacterTechnique[]\n  talents    CharacterTalent[]\n\n  @@index([userId])\n  @@index([realm])\n  @@index([level])\n  @@map(\"characters\")\n}\n\nmodel CultivationProgress {\n  id     String @id @default(cuid())\n  userId String @unique\n  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  currentTechniqueId String?\n  currentTechnique   CultivationTechnique? @relation(fields: [currentTechniqueId], references: [id])\n\n  qiAmount             BigInt @default(0)\n  qiCapacity           BigInt @default(100)\n  cultivationSpeed     Float  @default(1.0)\n  bottleneckProgress   Float  @default(0.0) // 0-100\n  breakthroughAttempts Int    @default(0)\n  stabilityPercentage  Float  @default(100.0)\n\n  // Session tracking\n  isSessionActive  Boolean   @default(false)\n  sessionStartTime DateTime?\n  sessionDuration  Int       @default(0) // seconds\n  sessionQiGained  BigInt    @default(0)\n  sessionExpGained BigInt    @default(0)\n\n  lastCalculatedAt DateTime @default(now())\n  createdAt        DateTime @default(now())\n  updatedAt        DateTime @updatedAt\n\n  @@index([userId])\n  @@index([isSessionActive])\n  @@index([lastCalculatedAt])\n  @@map(\"cultivation_progress\")\n}\n\n// =============================================================================\n// TECHNIQUE AND TALENT SYSTEMS\n// =============================================================================\n\nmodel CultivationTechnique {\n  id          String        @id @default(cuid())\n  name        String        @unique @db.VarChar(100)\n  description String        @db.Text\n  type        TechniqueType @default(BASIC)\n  element     ElementType   @default(FIRE)\n\n  // Requirements\n  minRealm CultivationRealm @default(MORTAL)\n  minLevel Int              @default(1)\n\n  // Effects\n  baseSpeed      Float @default(1.0)\n  qiEfficiency   Float @default(1.0)\n  stabilityBonus Float @default(0.0)\n\n  // Metadata\n  rarity   ItemRarity @default(COMMON)\n  isActive Boolean    @default(true)\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  // Relationships\n  userProgress        CultivationProgress[]\n  characterTechniques CharacterTechnique[]\n\n  @@index([name])\n  @@index([type])\n  @@index([element])\n  @@index([minRealm])\n  @@map(\"cultivation_techniques\")\n}\n\nmodel CharacterTechnique {\n  id          String               @id @default(cuid())\n  characterId String\n  character   Character            @relation(fields: [characterId], references: [id], onDelete: Cascade)\n  techniqueId String\n  technique   CultivationTechnique @relation(fields: [techniqueId], references: [id])\n\n  proficiency  Float  @default(0.0) // 0-100\n  level        Int    @default(1)\n  experience   BigInt @default(0)\n  masteryBonus Float  @default(0.0)\n\n  learnedAt  DateTime @default(now())\n  lastUsedAt DateTime @default(now())\n\n  @@unique([characterId, techniqueId])\n  @@index([characterId])\n  @@index([techniqueId])\n  @@map(\"character_techniques\")\n}\n\nmodel Talent {\n  id          String     @id @default(cuid())\n  name        String     @unique @db.VarChar(100)\n  description String     @db.Text\n  type        TalentType @default(PASSIVE)\n\n  // Effects (stored as JSON for flexibility)\n  effects Json @default(\"[]\")\n\n  // Requirements\n  requirements Json @default(\"[]\")\n\n  // Metadata\n  rarity   ItemRarity @default(COMMON)\n  isActive Boolean    @default(true)\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  // Relationships\n  characterTalents CharacterTalent[]\n\n  @@index([name])\n  @@index([type])\n  @@index([rarity])\n  @@map(\"talents\")\n}\n\nmodel CharacterTalent {\n  id          String    @id @default(cuid())\n  characterId String\n  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)\n  talentId    String\n  talent      Talent    @relation(fields: [talentId], references: [id])\n\n  isUnlocked Boolean   @default(false)\n  unlockedAt DateTime?\n\n  @@unique([characterId, talentId])\n  @@index([characterId])\n  @@index([talentId])\n  @@index([isUnlocked])\n  @@map(\"character_talents\")\n}\n\nmodel Bloodline {\n  id          String     @id @default(cuid())\n  name        String     @unique @db.VarChar(100)\n  description String     @db.Text\n  rarity      ItemRarity @default(COMMON)\n\n  // Abilities (stored as JSON)\n  abilities Json @default(\"[]\")\n\n  isActive Boolean @default(true)\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  // Relationships\n  characters Character[]\n\n  @@index([name])\n  @@index([rarity])\n  @@map(\"bloodlines\")\n}\n\n// =============================================================================\n// RESOURCES AND INVENTORY SYSTEM\n// =============================================================================\n\nmodel Resources {\n  id     String @id @default(cuid())\n  userId String @unique\n  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  spiritStones BigInt @default(0)\n  gold         BigInt @default(1000)\n\n  // Materials stored as JSON for flexibility\n  materials Json @default(\"{}\")\n  pills     Json @default(\"{}\")\n  herbs     Json @default(\"{}\")\n\n  lastUpdated DateTime @default(now())\n\n  @@index([userId])\n  @@map(\"resources\")\n}\n\nmodel Item {\n  id          String     @id @default(cuid())\n  name        String     @unique @db.VarChar(100)\n  description String     @db.Text\n  type        ItemType   @default(MATERIAL)\n  rarity      ItemRarity @default(COMMON)\n  value       Int        @default(1)\n\n  // Properties\n  stackable  Boolean @default(true)\n  tradeable  Boolean @default(true)\n  consumable Boolean @default(false)\n\n  // Effects and requirements (stored as JSON)\n  effects      Json @default(\"[]\")\n  requirements Json @default(\"[]\")\n\n  // Metadata\n  isActive Boolean @default(true)\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  // Relationships\n  inventoryItems InventoryItem[]\n\n  @@index([name])\n  @@index([type])\n  @@index([rarity])\n  @@map(\"items\")\n}\n\nmodel InventoryItem {\n  id     String @id @default(cuid())\n  userId String\n  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n  itemId String\n  item   Item   @relation(fields: [itemId], references: [id])\n\n  quantity Int  @default(1)\n  metadata Json @default(\"{}\")\n\n  acquiredAt DateTime @default(now())\n\n  @@unique([userId, itemId])\n  @@index([userId])\n  @@index([itemId])\n  @@map(\"inventory_items\")\n}\n\n// =============================================================================\n// COMBAT SYSTEM\n// =============================================================================\n\nmodel CombatStats {\n  id     String @id @default(cuid())\n  userId String @unique\n  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  level          Int   @default(1)\n  health         Int   @default(100)\n  maxHealth      Int   @default(100)\n  attack         Int   @default(10)\n  defense        Int   @default(10)\n  speed          Int   @default(10)\n  criticalChance Float @default(5.0)\n  criticalDamage Float @default(150.0)\n\n  combatExperience BigInt @default(0)\n  wins             Int    @default(0)\n  losses           Int    @default(0)\n  draws            Int    @default(0)\n\n  lastCombatAt DateTime?\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([userId])\n  @@index([level])\n  @@map(\"combat_stats\")\n}\n\nmodel CombatLog {\n  id     String @id @default(cuid())\n  userId String\n  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  opponentName     String       @db.VarChar(100)\n  result           CombatResult @default(DRAW)\n  duration         Int          @default(0) // seconds\n  damageDealt      Int          @default(0)\n  damageReceived   Int          @default(0)\n  experienceGained BigInt       @default(0)\n\n  // Loot and detailed log stored as JSON\n  lootGained    Json @default(\"[]\")\n  combatDetails Json @default(\"[]\")\n\n  foughtAt DateTime @default(now())\n\n  @@index([userId])\n  @@index([result])\n  @@index([foughtAt])\n  @@map(\"combat_logs\")\n}\n\n// =============================================================================\n// SECT SYSTEM\n// =============================================================================\n\nmodel Sect {\n  id          String @id @default(cuid())\n  name        String @unique @db.VarChar(100)\n  description String @db.Text\n  level       Int    @default(1)\n  experience  BigInt @default(0)\n  leaderId    String\n\n  // Resources\n  spiritStones BigInt @default(0)\n  reputation   Int    @default(0)\n  influence    Int    @default(0)\n  territory    Int    @default(1)\n\n  // Buildings (stored as JSON for flexibility)\n  buildings Json @default(\"[]\")\n\n  // Relationships (stored as arrays)\n  alliances Json @default(\"[]\")\n  enemies   Json @default(\"[]\")\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  // Relationships\n  members SectMember[]\n\n  @@index([name])\n  @@index([leaderId])\n  @@index([level])\n  @@map(\"sects\")\n}\n\nmodel SectMember {\n  id     String @id @default(cuid())\n  userId String @unique\n  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n  sectId String\n  sect   Sect   @relation(fields: [sectId], references: [id], onDelete: Cascade)\n\n  role         SectRole @default(OUTER_DISCIPLE)\n  contribution BigInt   @default(0)\n  permissions  Json     @default(\"[]\")\n\n  joinedAt     DateTime @default(now())\n  lastActiveAt DateTime @default(now())\n\n  @@index([userId])\n  @@index([sectId])\n  @@index([role])\n  @@map(\"sect_members\")\n}\n\n// =============================================================================\n// ACHIEVEMENTS AND STATISTICS\n// =============================================================================\n\nmodel Achievement {\n  id          String              @id @default(cuid())\n  name        String              @unique @db.VarChar(100)\n  description String              @db.Text\n  category    AchievementCategory @default(CULTIVATION)\n  maxProgress Int                 @default(1)\n\n  // Rewards (stored as JSON)\n  rewards Json @default(\"[]\")\n\n  // Metadata\n  isHidden Boolean @default(false)\n  isActive Boolean @default(true)\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  // Relationships\n  userAchievements UserAchievement[]\n\n  @@index([name])\n  @@index([category])\n  @@map(\"achievements\")\n}\n\nmodel UserAchievement {\n  id            String      @id @default(cuid())\n  userId        String\n  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)\n  achievementId String\n  achievement   Achievement @relation(fields: [achievementId], references: [id])\n\n  progress    Int       @default(0)\n  isCompleted Boolean   @default(false)\n  completedAt DateTime?\n\n  @@unique([userId, achievementId])\n  @@index([userId])\n  @@index([achievementId])\n  @@index([isCompleted])\n  @@map(\"user_achievements\")\n}\n\nmodel GameStatistics {\n  id     String @id @default(cuid())\n  userId String @unique\n  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  totalPlayTime        BigInt @default(0) // seconds\n  cultivationTime      BigInt @default(0)\n  combatWins           Int    @default(0)\n  combatLosses         Int    @default(0)\n  itemsCrafted         Int    @default(0)\n  achievementsUnlocked Int    @default(0)\n  realmBreakthroughs   Int    @default(0)\n  sectContribution     BigInt @default(0)\n\n  // Resource tracking (stored as JSON)\n  resourcesEarned Json @default(\"{}\")\n\n  lastUpdated DateTime @default(now())\n\n  @@index([userId])\n  @@map(\"game_statistics\")\n}\n\n// =============================================================================\n// GAME EVENTS AND LOGGING\n// =============================================================================\n\nmodel GameEvent {\n  id     String @id @default(cuid())\n  userId String\n  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  type      GameEventType @default(CULTIVATION_BREAKTHROUGH)\n  data      Json          @default(\"{}\")\n  processed Boolean       @default(false)\n\n  createdAt   DateTime  @default(now())\n  processedAt DateTime?\n\n  @@index([userId])\n  @@index([type])\n  @@index([processed])\n  @@index([createdAt])\n  @@map(\"game_events\")\n}\n\n// =============================================================================\n// ENUMS\n// =============================================================================\n\nenum CultivationRealm {\n  MORTAL\n  QI_REFINING\n  FOUNDATION_ESTABLISHMENT\n  CORE_FORMATION\n  NASCENT_SOUL\n  SOUL_TRANSFORMATION\n  VOID_REFINEMENT\n  BODY_INTEGRATION\n  MAHAYANA\n  TRANSCENDENCE\n}\n\nenum ElementType {\n  FIRE\n  WATER\n  EARTH\n  WOOD\n  METAL\n  LIGHTNING\n  ICE\n  DARKNESS\n  LIGHT\n}\n\nenum SpiritualGrade {\n  TRASH\n  COMMON\n  UNCOMMON\n  RARE\n  LEGENDARY\n  MYTHICAL\n}\n\nenum TechniqueType {\n  BASIC\n  ADVANCED\n  SUPREME\n  DIVINE\n}\n\nenum TalentType {\n  PASSIVE\n  ACTIVE\n  CONDITIONAL\n}\n\nenum ItemType {\n  PILL\n  HERB\n  WEAPON\n  ARMOR\n  ARTIFACT\n  MATERIAL\n  SCROLL\n  TREASURE\n}\n\nenum ItemRarity {\n  COMMON\n  UNCOMMON\n  RARE\n  EPIC\n  LEGENDARY\n  MYTHICAL\n  DIVINE\n}\n\nenum SectRole {\n  LEADER\n  ELDER\n  CORE_DISCIPLE\n  INNER_DISCIPLE\n  OUTER_DISCIPLE\n}\n\nenum AchievementCategory {\n  CULTIVATION\n  COMBAT\n  EXPLORATION\n  SOCIAL\n  COLLECTION\n  SPECIAL\n}\n\nenum CombatResult {\n  WIN\n  LOSS\n  DRAW\n}\n\nenum GameEventType {\n  CULTIVATION_BREAKTHROUGH\n  ITEM_ACQUIRED\n  COMBAT_COMPLETED\n  ACHIEVEMENT_UNLOCKED\n  SECT_JOINED\n  SECT_LEFT\n  TALENT_UNLOCKED\n  BLOODLINE_AWAKENED\n}\n",
  "inlineSchemaHash": "9d7ebe5797e434a9a823c06d4e2e62d8fd8228fc13842a1f0a3418586a85f0cc",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"passwordHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"displayName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"avatar\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"biography\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"autoSave\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"notifications\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"soundEnabled\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"lastActiveAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"character\",\"kind\":\"object\",\"type\":\"Character\",\"relationName\":\"CharacterToUser\"},{\"name\":\"resources\",\"kind\":\"object\",\"type\":\"Resources\",\"relationName\":\"ResourcesToUser\"},{\"name\":\"inventory\",\"kind\":\"object\",\"type\":\"InventoryItem\",\"relationName\":\"InventoryItemToUser\"},{\"name\":\"cultivation\",\"kind\":\"object\",\"type\":\"CultivationProgress\",\"relationName\":\"CultivationProgressToUser\"},{\"name\":\"combat\",\"kind\":\"object\",\"type\":\"CombatStats\",\"relationName\":\"CombatStatsToUser\"},{\"name\":\"sectMembership\",\"kind\":\"object\",\"type\":\"SectMember\",\"relationName\":\"SectMemberToUser\"},{\"name\":\"achievements\",\"kind\":\"object\",\"type\":\"UserAchievement\",\"relationName\":\"UserToUserAchievement\"},{\"name\":\"statistics\",\"kind\":\"object\",\"type\":\"GameStatistics\",\"relationName\":\"GameStatisticsToUser\"},{\"name\":\"gameEvents\",\"kind\":\"object\",\"type\":\"GameEvent\",\"relationName\":\"GameEventToUser\"},{\"name\":\"combatLogs\",\"kind\":\"object\",\"type\":\"CombatLog\",\"relationName\":\"CombatLogToUser\"}],\"dbName\":\"users\"},\"Character\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"CharacterToUser\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"realm\",\"kind\":\"enum\",\"type\":\"CultivationRealm\"},{\"name\":\"level\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"experience\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"experienceToNext\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"strength\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"agility\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"intelligence\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"constitution\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"perception\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"luck\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"spiritualElement\",\"kind\":\"enum\",\"type\":\"ElementType\"},{\"name\":\"spiritualPurity\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"spiritualGrade\",\"kind\":\"enum\",\"type\":\"SpiritualGrade\"},{\"name\":\"bloodlineId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bloodline\",\"kind\":\"object\",\"type\":\"Bloodline\",\"relationName\":\"BloodlineToCharacter\"},{\"name\":\"bloodlineAwakening\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"techniques\",\"kind\":\"object\",\"type\":\"CharacterTechnique\",\"relationName\":\"CharacterToCharacterTechnique\"},{\"name\":\"talents\",\"kind\":\"object\",\"type\":\"CharacterTalent\",\"relationName\":\"CharacterToCharacterTalent\"}],\"dbName\":\"characters\"},\"CultivationProgress\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"CultivationProgressToUser\"},{\"name\":\"currentTechniqueId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"currentTechnique\",\"kind\":\"object\",\"type\":\"CultivationTechnique\",\"relationName\":\"CultivationProgressToCultivationTechnique\"},{\"name\":\"qiAmount\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"qiCapacity\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"cultivationSpeed\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"bottleneckProgress\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"breakthroughAttempts\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"stabilityPercentage\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"isSessionActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"sessionStartTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"sessionDuration\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"sessionQiGained\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"sessionExpGained\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"lastCalculatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"cultivation_progress\"},\"CultivationTechnique\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"TechniqueType\"},{\"name\":\"element\",\"kind\":\"enum\",\"type\":\"ElementType\"},{\"name\":\"minRealm\",\"kind\":\"enum\",\"type\":\"CultivationRealm\"},{\"name\":\"minLevel\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"baseSpeed\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"qiEfficiency\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"stabilityBonus\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"rarity\",\"kind\":\"enum\",\"type\":\"ItemRarity\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"userProgress\",\"kind\":\"object\",\"type\":\"CultivationProgress\",\"relationName\":\"CultivationProgressToCultivationTechnique\"},{\"name\":\"characterTechniques\",\"kind\":\"object\",\"type\":\"CharacterTechnique\",\"relationName\":\"CharacterTechniqueToCultivationTechnique\"}],\"dbName\":\"cultivation_techniques\"},\"CharacterTechnique\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"characterId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"character\",\"kind\":\"object\",\"type\":\"Character\",\"relationName\":\"CharacterToCharacterTechnique\"},{\"name\":\"techniqueId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"technique\",\"kind\":\"object\",\"type\":\"CultivationTechnique\",\"relationName\":\"CharacterTechniqueToCultivationTechnique\"},{\"name\":\"proficiency\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"level\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"experience\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"masteryBonus\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"learnedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"lastUsedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"character_techniques\"},\"Talent\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"TalentType\"},{\"name\":\"effects\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"requirements\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"rarity\",\"kind\":\"enum\",\"type\":\"ItemRarity\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"characterTalents\",\"kind\":\"object\",\"type\":\"CharacterTalent\",\"relationName\":\"CharacterTalentToTalent\"}],\"dbName\":\"talents\"},\"CharacterTalent\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"characterId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"character\",\"kind\":\"object\",\"type\":\"Character\",\"relationName\":\"CharacterToCharacterTalent\"},{\"name\":\"talentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"talent\",\"kind\":\"object\",\"type\":\"Talent\",\"relationName\":\"CharacterTalentToTalent\"},{\"name\":\"isUnlocked\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"unlockedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"character_talents\"},\"Bloodline\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"rarity\",\"kind\":\"enum\",\"type\":\"ItemRarity\"},{\"name\":\"abilities\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"characters\",\"kind\":\"object\",\"type\":\"Character\",\"relationName\":\"BloodlineToCharacter\"}],\"dbName\":\"bloodlines\"},\"Resources\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ResourcesToUser\"},{\"name\":\"spiritStones\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"gold\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"materials\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"pills\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"herbs\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"lastUpdated\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"resources\"},\"Item\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"ItemType\"},{\"name\":\"rarity\",\"kind\":\"enum\",\"type\":\"ItemRarity\"},{\"name\":\"value\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"stackable\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"tradeable\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"consumable\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"effects\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"requirements\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"inventoryItems\",\"kind\":\"object\",\"type\":\"InventoryItem\",\"relationName\":\"InventoryItemToItem\"}],\"dbName\":\"items\"},\"InventoryItem\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"InventoryItemToUser\"},{\"name\":\"itemId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"item\",\"kind\":\"object\",\"type\":\"Item\",\"relationName\":\"InventoryItemToItem\"},{\"name\":\"quantity\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"acquiredAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"inventory_items\"},\"CombatStats\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"CombatStatsToUser\"},{\"name\":\"level\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"health\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"maxHealth\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"attack\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"defense\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"speed\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"criticalChance\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"criticalDamage\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"combatExperience\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"wins\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"losses\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"draws\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"lastCombatAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"combat_stats\"},\"CombatLog\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"CombatLogToUser\"},{\"name\":\"opponentName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"result\",\"kind\":\"enum\",\"type\":\"CombatResult\"},{\"name\":\"duration\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"damageDealt\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"damageReceived\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"experienceGained\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"lootGained\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"combatDetails\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"foughtAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"combat_logs\"},\"Sect\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"level\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"experience\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"leaderId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"spiritStones\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"reputation\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"influence\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"territory\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"buildings\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"alliances\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"enemies\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"members\",\"kind\":\"object\",\"type\":\"SectMember\",\"relationName\":\"SectToSectMember\"}],\"dbName\":\"sects\"},\"SectMember\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SectMemberToUser\"},{\"name\":\"sectId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sect\",\"kind\":\"object\",\"type\":\"Sect\",\"relationName\":\"SectToSectMember\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"SectRole\"},{\"name\":\"contribution\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"permissions\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"joinedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"lastActiveAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"sect_members\"},\"Achievement\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"category\",\"kind\":\"enum\",\"type\":\"AchievementCategory\"},{\"name\":\"maxProgress\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"rewards\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"isHidden\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"userAchievements\",\"kind\":\"object\",\"type\":\"UserAchievement\",\"relationName\":\"AchievementToUserAchievement\"}],\"dbName\":\"achievements\"},\"UserAchievement\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToUserAchievement\"},{\"name\":\"achievementId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"achievement\",\"kind\":\"object\",\"type\":\"Achievement\",\"relationName\":\"AchievementToUserAchievement\"},{\"name\":\"progress\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"isCompleted\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"completedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"user_achievements\"},\"GameStatistics\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"GameStatisticsToUser\"},{\"name\":\"totalPlayTime\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"cultivationTime\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"combatWins\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"combatLosses\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"itemsCrafted\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"achievementsUnlocked\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"realmBreakthroughs\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"sectContribution\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"resourcesEarned\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"lastUpdated\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"game_statistics\"},\"GameEvent\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"GameEventToUser\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"GameEventType\"},{\"name\":\"data\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"processed\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"processedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"game_events\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

