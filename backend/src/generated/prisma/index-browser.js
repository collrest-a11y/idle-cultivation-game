
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  passwordHash: 'passwordHash',
  displayName: 'displayName',
  avatar: 'avatar',
  title: 'title',
  biography: 'biography',
  autoSave: 'autoSave',
  notifications: 'notifications',
  soundEnabled: 'soundEnabled',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastActiveAt: 'lastActiveAt'
};

exports.Prisma.CharacterScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  realm: 'realm',
  level: 'level',
  experience: 'experience',
  experienceToNext: 'experienceToNext',
  strength: 'strength',
  agility: 'agility',
  intelligence: 'intelligence',
  constitution: 'constitution',
  perception: 'perception',
  luck: 'luck',
  spiritualElement: 'spiritualElement',
  spiritualPurity: 'spiritualPurity',
  spiritualGrade: 'spiritualGrade',
  bloodlineId: 'bloodlineId',
  bloodlineAwakening: 'bloodlineAwakening',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CultivationProgressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  currentTechniqueId: 'currentTechniqueId',
  qiAmount: 'qiAmount',
  qiCapacity: 'qiCapacity',
  cultivationSpeed: 'cultivationSpeed',
  bottleneckProgress: 'bottleneckProgress',
  breakthroughAttempts: 'breakthroughAttempts',
  stabilityPercentage: 'stabilityPercentage',
  isSessionActive: 'isSessionActive',
  sessionStartTime: 'sessionStartTime',
  sessionDuration: 'sessionDuration',
  sessionQiGained: 'sessionQiGained',
  sessionExpGained: 'sessionExpGained',
  lastCalculatedAt: 'lastCalculatedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CultivationTechniqueScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  type: 'type',
  element: 'element',
  minRealm: 'minRealm',
  minLevel: 'minLevel',
  baseSpeed: 'baseSpeed',
  qiEfficiency: 'qiEfficiency',
  stabilityBonus: 'stabilityBonus',
  rarity: 'rarity',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CharacterTechniqueScalarFieldEnum = {
  id: 'id',
  characterId: 'characterId',
  techniqueId: 'techniqueId',
  proficiency: 'proficiency',
  level: 'level',
  experience: 'experience',
  masteryBonus: 'masteryBonus',
  learnedAt: 'learnedAt',
  lastUsedAt: 'lastUsedAt'
};

exports.Prisma.TalentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  type: 'type',
  effects: 'effects',
  requirements: 'requirements',
  rarity: 'rarity',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CharacterTalentScalarFieldEnum = {
  id: 'id',
  characterId: 'characterId',
  talentId: 'talentId',
  isUnlocked: 'isUnlocked',
  unlockedAt: 'unlockedAt'
};

exports.Prisma.BloodlineScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  rarity: 'rarity',
  abilities: 'abilities',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ResourcesScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  spiritStones: 'spiritStones',
  gold: 'gold',
  materials: 'materials',
  pills: 'pills',
  herbs: 'herbs',
  lastUpdated: 'lastUpdated'
};

exports.Prisma.ItemScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  type: 'type',
  rarity: 'rarity',
  value: 'value',
  stackable: 'stackable',
  tradeable: 'tradeable',
  consumable: 'consumable',
  effects: 'effects',
  requirements: 'requirements',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InventoryItemScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  itemId: 'itemId',
  quantity: 'quantity',
  metadata: 'metadata',
  acquiredAt: 'acquiredAt'
};

exports.Prisma.CombatStatsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  level: 'level',
  health: 'health',
  maxHealth: 'maxHealth',
  attack: 'attack',
  defense: 'defense',
  speed: 'speed',
  criticalChance: 'criticalChance',
  criticalDamage: 'criticalDamage',
  combatExperience: 'combatExperience',
  wins: 'wins',
  losses: 'losses',
  draws: 'draws',
  lastCombatAt: 'lastCombatAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CombatLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  opponentName: 'opponentName',
  result: 'result',
  duration: 'duration',
  damageDealt: 'damageDealt',
  damageReceived: 'damageReceived',
  experienceGained: 'experienceGained',
  lootGained: 'lootGained',
  combatDetails: 'combatDetails',
  foughtAt: 'foughtAt'
};

exports.Prisma.SectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  level: 'level',
  experience: 'experience',
  leaderId: 'leaderId',
  spiritStones: 'spiritStones',
  reputation: 'reputation',
  influence: 'influence',
  territory: 'territory',
  buildings: 'buildings',
  alliances: 'alliances',
  enemies: 'enemies',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SectMemberScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sectId: 'sectId',
  role: 'role',
  contribution: 'contribution',
  permissions: 'permissions',
  joinedAt: 'joinedAt',
  lastActiveAt: 'lastActiveAt'
};

exports.Prisma.AchievementScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  category: 'category',
  maxProgress: 'maxProgress',
  rewards: 'rewards',
  isHidden: 'isHidden',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserAchievementScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  achievementId: 'achievementId',
  progress: 'progress',
  isCompleted: 'isCompleted',
  completedAt: 'completedAt'
};

exports.Prisma.GameStatisticsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  totalPlayTime: 'totalPlayTime',
  cultivationTime: 'cultivationTime',
  combatWins: 'combatWins',
  combatLosses: 'combatLosses',
  itemsCrafted: 'itemsCrafted',
  achievementsUnlocked: 'achievementsUnlocked',
  realmBreakthroughs: 'realmBreakthroughs',
  sectContribution: 'sectContribution',
  resourcesEarned: 'resourcesEarned',
  lastUpdated: 'lastUpdated'
};

exports.Prisma.GameEventScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  data: 'data',
  processed: 'processed',
  createdAt: 'createdAt',
  processedAt: 'processedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.CultivationRealm = exports.$Enums.CultivationRealm = {
  MORTAL: 'MORTAL',
  QI_REFINING: 'QI_REFINING',
  FOUNDATION_ESTABLISHMENT: 'FOUNDATION_ESTABLISHMENT',
  CORE_FORMATION: 'CORE_FORMATION',
  NASCENT_SOUL: 'NASCENT_SOUL',
  SOUL_TRANSFORMATION: 'SOUL_TRANSFORMATION',
  VOID_REFINEMENT: 'VOID_REFINEMENT',
  BODY_INTEGRATION: 'BODY_INTEGRATION',
  MAHAYANA: 'MAHAYANA',
  TRANSCENDENCE: 'TRANSCENDENCE'
};

exports.ElementType = exports.$Enums.ElementType = {
  FIRE: 'FIRE',
  WATER: 'WATER',
  EARTH: 'EARTH',
  WOOD: 'WOOD',
  METAL: 'METAL',
  LIGHTNING: 'LIGHTNING',
  ICE: 'ICE',
  DARKNESS: 'DARKNESS',
  LIGHT: 'LIGHT'
};

exports.SpiritualGrade = exports.$Enums.SpiritualGrade = {
  TRASH: 'TRASH',
  COMMON: 'COMMON',
  UNCOMMON: 'UNCOMMON',
  RARE: 'RARE',
  LEGENDARY: 'LEGENDARY',
  MYTHICAL: 'MYTHICAL'
};

exports.TechniqueType = exports.$Enums.TechniqueType = {
  BASIC: 'BASIC',
  ADVANCED: 'ADVANCED',
  SUPREME: 'SUPREME',
  DIVINE: 'DIVINE'
};

exports.ItemRarity = exports.$Enums.ItemRarity = {
  COMMON: 'COMMON',
  UNCOMMON: 'UNCOMMON',
  RARE: 'RARE',
  EPIC: 'EPIC',
  LEGENDARY: 'LEGENDARY',
  MYTHICAL: 'MYTHICAL',
  DIVINE: 'DIVINE'
};

exports.TalentType = exports.$Enums.TalentType = {
  PASSIVE: 'PASSIVE',
  ACTIVE: 'ACTIVE',
  CONDITIONAL: 'CONDITIONAL'
};

exports.ItemType = exports.$Enums.ItemType = {
  PILL: 'PILL',
  HERB: 'HERB',
  WEAPON: 'WEAPON',
  ARMOR: 'ARMOR',
  ARTIFACT: 'ARTIFACT',
  MATERIAL: 'MATERIAL',
  SCROLL: 'SCROLL',
  TREASURE: 'TREASURE'
};

exports.CombatResult = exports.$Enums.CombatResult = {
  WIN: 'WIN',
  LOSS: 'LOSS',
  DRAW: 'DRAW'
};

exports.SectRole = exports.$Enums.SectRole = {
  LEADER: 'LEADER',
  ELDER: 'ELDER',
  CORE_DISCIPLE: 'CORE_DISCIPLE',
  INNER_DISCIPLE: 'INNER_DISCIPLE',
  OUTER_DISCIPLE: 'OUTER_DISCIPLE'
};

exports.AchievementCategory = exports.$Enums.AchievementCategory = {
  CULTIVATION: 'CULTIVATION',
  COMBAT: 'COMBAT',
  EXPLORATION: 'EXPLORATION',
  SOCIAL: 'SOCIAL',
  COLLECTION: 'COLLECTION',
  SPECIAL: 'SPECIAL'
};

exports.GameEventType = exports.$Enums.GameEventType = {
  CULTIVATION_BREAKTHROUGH: 'CULTIVATION_BREAKTHROUGH',
  ITEM_ACQUIRED: 'ITEM_ACQUIRED',
  COMBAT_COMPLETED: 'COMBAT_COMPLETED',
  ACHIEVEMENT_UNLOCKED: 'ACHIEVEMENT_UNLOCKED',
  SECT_JOINED: 'SECT_JOINED',
  SECT_LEFT: 'SECT_LEFT',
  TALENT_UNLOCKED: 'TALENT_UNLOCKED',
  BLOODLINE_AWAKENED: 'BLOODLINE_AWAKENED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Character: 'Character',
  CultivationProgress: 'CultivationProgress',
  CultivationTechnique: 'CultivationTechnique',
  CharacterTechnique: 'CharacterTechnique',
  Talent: 'Talent',
  CharacterTalent: 'CharacterTalent',
  Bloodline: 'Bloodline',
  Resources: 'Resources',
  Item: 'Item',
  InventoryItem: 'InventoryItem',
  CombatStats: 'CombatStats',
  CombatLog: 'CombatLog',
  Sect: 'Sect',
  SectMember: 'SectMember',
  Achievement: 'Achievement',
  UserAchievement: 'UserAchievement',
  GameStatistics: 'GameStatistics',
  GameEvent: 'GameEvent'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
